// src/components/Dashboard.js
import React, { useState } from "react";
import {
  PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis,
  LineChart, Line, CartesianGrid, Tooltip as RechartsTooltip
} from "recharts";
import { stats } from "./data/statistics";
import { Button, ButtonGroup, Card, CardContent, Typography, Box } from "@mui/material";
import SchoolIcon from "@mui/icons-material/School";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import ClassIcon from "@mui/icons-material/Class";
import AssignmentIcon from "@mui/icons-material/Assignment";
import TrendingUpIcon from "@mui/icons-material/TrendingUp";
import MonetizationOnIcon from "@mui/icons-material/MonetizationOn";
import LocalOfferIcon from "@mui/icons-material/LocalOffer";
import GroupIcon from "@mui/icons-material/Group";
import StarRateIcon from "@mui/icons-material/StarRate";
import AssessmentIcon from "@mui/icons-material/Assessment";
import { useTranslation } from "react-i18next";


const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#AA66CC"];

const StatCard = ({ label, value, icon: Icon }) => (
  <Card sx={{ minWidth: 200, p: 2, textAlign: "center", boxShadow: 3 }}>
    {Icon && <Icon sx={{ fontSize: 30, color: "#1976d2", mb: 1 }} />}
    <Typography variant="subtitle2" color="text.secondary">{label}</Typography>
    <Typography variant="h6" fontWeight="bold">{value}</Typography>
  </Card>
);

const TestNow = () => {
  const [userType, setUserType] = useState("student");
  const { t } = useTranslation();

  const renderStudentStats = () => {
    const data = stats.student;
    return (
      <>
        <Typography variant="h5" gutterBottom>๐ ุฅุญุตุงุฆูุงุช ุงูุทุงูุจ</Typography>

       <Box sx={{ display: "flex", gap: 2, flexWrap: "wrap", mb: 4 }}>
          <StatCard label="ุงูุฏุฑูุณ ุงููุญุฌูุฒุฉ" value={data.lessons} icon={ClassIcon} />
          <StatCard label="ุงูุฏุฑูุณ ุงูููุชููุฉ" value={data.completedLessons} icon={CheckCircleIcon} />
          <StatCard label="ุงููุญุงุถุฑุงุช ุงูุชู ุญุถุฑูุง" value={data.lecturesAttended} icon={SchoolIcon} />
          <StatCard label="ุงูุจุงูุงุช ุงููุญุฌูุฒุฉ" value={data.lessons} icon={ClassIcon} />
          <StatCard label="ุงูุงุฎุชุจุงุฑุงุช" value={data.examsTaken} icon={AssignmentIcon} />
          <StatCard label="ูุณุจุฉ ุงูุชูุฏู" value={`${data.progress}%`} icon={TrendingUpIcon} />
          <StatCard label="ุงููุจูุบ ุงููุฏููุน" value={`${data.totalPayments} ุฌููู`} icon={MonetizationOnIcon} />
          <StatCard label="ุนุฏุฏ ุงูููุงุท ุงูููุชุณุจุฉ" value={`${data.totalPayments}`} icon={MonetizationOnIcon} />
          <StatCard label="ุฑุตูุฏู" value={`${data.totalPayments} ุฌููู`} icon={MonetizationOnIcon} />
          <StatCard label="ุทูุจุงุช ุญุฌุฒ ุงูุฏุฑูุณ" value={data.discountsUsed} icon={LocalOfferIcon} />
          <StatCard label="ุงูุฎุตููุงุช ุงููุญุฌูุฒุฉ" value={data.discountsUsed} icon={LocalOfferIcon} />
          <StatCard label="ุงูุฑุณุงุฆู ุงูุบูุฑ ููุฑุคุกู" value={10} icon={AssignmentIcon} />

        </Box>


       <Box sx={{ display: "flex", flexWrap: "wrap", gap: 4 }}>
  {/* ุงููุฌููุนุฉ ุงูุฃููู */}
  <Box sx={{ flex: "1 1 45%" }}>
    <Typography variant="subtitle1" sx={{ mb: 1 }}>๐ ุฎุท ุฒููู ูุญุฌูุฒุงุช ุงูุฏุฑูุณ</Typography>
    <LineChart width={500} height={300} data={data.lessonsChart}>
      <CartesianGrid stroke="#eee" />
      <XAxis dataKey="date" />
      <YAxis />
      <RechartsTooltip />
      <Line type="monotone" dataKey="lessons" stroke="#8884d8" strokeWidth={2} />
    </LineChart>
  </Box>

  <Box sx={{ flex: "1 1 45%" }}>
    <Typography variant="subtitle1" sx={{ mb: 1 }}>๐ ุชูุฏู ุงูุทุงูุจ ุนุจุฑ ุงูููุช</Typography>
    <LineChart width={500} height={300} data={data.progressHistory}>
      <CartesianGrid stroke="#ccc" />
      <XAxis dataKey="date" />
      <YAxis />
      <RechartsTooltip />
      <Line type="monotone" dataKey="progress" stroke="#ff7300" />
    </LineChart>
  </Box>

  {/* ุงููุฌููุนุฉ ุงูุซุงููุฉ */}
  <Box sx={{ flex: "1 1 45%" }}>
    <Typography variant="subtitle1" sx={{ mb: 1 }}>๐จโ๐ซ ุนุฏุฏ ุงูุฏุฑูุณ ููู ูุฏุฑุจ</Typography>
    <BarChart width={500} height={300} data={data.lessonsByInstructor}>
      <XAxis dataKey="name" />
      <YAxis />
      <RechartsTooltip />
      <Bar dataKey="value" fill="#8884d8" />
    </BarChart>
  </Box>

  <Box sx={{ flex: "1 1 45%" }}>
    <Typography variant="subtitle1" sx={{ mb: 1 }}>๐ ุฃููุงุน ุงูุญุฌูุฒุงุช</Typography>
    <PieChart width={500} height={300}>
      <Pie
        data={data.bookingsByType}
        cx="50%" cy="50%" outerRadius={100}
        dataKey="value" nameKey="name"
        label
      >
        {data.bookingsByType.map((entry, index) => (
          <Cell key={index} fill={COLORS[index % COLORS.length]} />
        ))}
      </Pie>
      <RechartsTooltip />
    </PieChart>
  </Box>
</Box>

      </>
    );
  };

  const renderInstructorStats = () => {
    const data = stats.instructor;
    return (
      <>
      
        <Typography variant="subtitle1" sx={{ mt: 4, mb: 1 }}>๐ ุนุฏุฏ ุงูุฏุฑูุณ ุนุจุฑ ุงูููุช</Typography>
        <LineChart width={1000} height={500} data={data.lessonsChart}>
          <CartesianGrid stroke="#eee" />
          <XAxis dataKey="date" />
          <YAxis />
          <RechartsTooltip />
          <Line type="monotone" dataKey="lessons" stroke="#00C49F" strokeWidth={3} />
        </LineChart>
        
        <Typography variant="h5" gutterBottom>๐จโ๐ซ ุฅุญุตุงุฆูุงุช ุงููุฏุฑุจ</Typography>

        <Box sx={{ display: "flex", gap: 2, flexWrap: "wrap", mb: 4 }}>
          <StatCard label="ุฅุฌูุงูู ุงูุฏุฑูุณ" value={data.totalLessonsTaught} icon={ClassIcon} />
          <StatCard label="ุทูุจุงุช ุญุฌุฒ ุฏุฑูุณ ููุฏ ุงูุงูุชุธุงุฑ" value={data.totalLessonsTaught} icon={ClassIcon} />
          <StatCard label="ุนุฏุฏ ุงูุทูุงุจ" value={data.totalStudentsTaught} icon={GroupIcon} />
          <StatCard label="ุงููุญุงุถุฑุงุช ุงูููุฏูุฉ" value={data.totalLecturesGiven} icon={SchoolIcon} />
          <StatCard label="ุงูุชูููู ุงูุนุงู" value={`${data.averageRating} โญ`} icon={StarRateIcon} />
          <StatCard label="ุงูุงุฎุชุจุงุฑุงุช" value={data.examsSupervised} icon={AssignmentIcon} />
          <StatCard label="ุงูุฎุตููุงุช" value={data.examsSupervised} icon={AssignmentIcon} />
          <StatCard label="ุนุฏุฏ ุงูููุงุท ุงูููุชุณุจุฉ" value={`${100}`} icon={MonetizationOnIcon} />
          <StatCard label="ุฑุตูุฏู" value={`${100} ุฌููู`} icon={MonetizationOnIcon} />
          <StatCard label="ุงูุจุงูุงุช" value={data.examsSupervised} icon={AssignmentIcon} />
          <StatCard label="ุฏุฑูุณ ูุฐุง ุงูุฃุณุจูุน" value={data.scheduledThisWeek} icon={AssessmentIcon} />
          <StatCard label="ุงูุฑุณุงุฆู ุงูุบูุฑ ููุฑุคุกู" value={10} icon={AssignmentIcon} />

        </Box>
      </>
    );
  };

  const renderAdminStats = () => {
    const data = stats.admin;
    return (
      <>
        <Typography variant="h5" gutterBottom>๐จโ๐ผ ุฅุญุตุงุฆูุงุช ุงููุณุฆูู</Typography>

         <Box sx={{ display: "flex", gap: 2, flexWrap: "wrap", mb: 4 }}>
          <StatCard label="ุฅุฌูุงูู ุงููุณุชุฎุฏููู" value={data.totalUsers} icon={GroupIcon} />
          <StatCard label="ุนุฏุฏ ุงูุทูุงุจ" value={data.totalStudents} icon={SchoolIcon} />
          <StatCard label="ุทูุงุจ ุญุงููู" value={data.totalStudents} icon={SchoolIcon} />
          <StatCard label="ุทูุจุงุช ุตุฑู ุงูุทูุงุจ ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalStudents} icon={SchoolIcon} />
          <StatCard label="ุนุฏุฏ ุงููุฏุฑุจูู" value={data.totalInstructors} icon={ClassIcon} />
          <StatCard label="ูุฏุฑุจูู ุญุงููู" value={data.totalInstructors} icon={ClassIcon} />
          <StatCard label="ุทูุจุงุช ุตุฑู ูุฏุฑุจูู ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalStudents} icon={SchoolIcon} />
          <StatCard label="ุทูุจุงุช ูุจูู ุงููุฏุฑุจูู" value={data.totalStudents} icon={SchoolIcon} />
          <StatCard label="ุงูุญุตุต ุงููุณุฌูุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุงุนูุงูุงุช" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุจุงูุงุช" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุจุงูุงุช ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ูุญุงุถุฑุงุช" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ูุญุงุถุฑุงุช ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุฎุตููุงุช" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุฎุตููุงุช ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ูุธุงุฆู ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุงุฎุชุจุงุฑุงุช" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุงุฎุชุจุงุฑุงุช ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุทูุจุงุช ุญุฌุฒ ุฏุฑูุณ ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุทูุจุงุช  ุงูุงุจุงุก ููุงุจูุงุก ููุฏ ุงููุฑุงุฌุนุฉ" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุงูุดูุงูู" value={data.totalBookings} icon={AssignmentIcon} />
          <StatCard label="ุงูุฑุณุงุฆู ุงูุบูุฑ ููุฑุคุกู" value={data.totalBookings} icon={AssignmentIcon} />


        </Box>

        <Box sx={{ display: "flex", gap: 4, flexWrap: "wrap", alignItems: "center" }}>
          <Box>
            <Typography variant="subtitle1" sx={{ mb: 1 }}>๐ ุฃููุงุน ุงูุญุฌูุฒุงุช</Typography>
            <PieChart width={300} height={250}>
              <Pie
                data={data.bookingsByType}
                cx="50%" cy="50%" outerRadius={80}
                dataKey="value" nameKey="name" label
              >
                {data.bookingsByType.map((entry, index) => (
                  <Cell key={index} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <RechartsTooltip />
            </PieChart>
          </Box>

          <Box>
            <Typography variant="subtitle1" sx={{ mb: 1 }}>๐ฐ ุงูุฅูุฑุงุฏุงุช ุงูุดูุฑูุฉ</Typography>
            <BarChart width={400} height={250} data={data.revenuePerMonth}>
              <XAxis dataKey="month" />
              <YAxis />
              <RechartsTooltip />
              <Bar dataKey="revenue" fill="#00C49F" />
            </BarChart>
          </Box>
        </Box>
      </>
    );
  };

  return (
    <Box sx={{ padding: 4 }}>
      <Typography variant="h4" gutterBottom>๐ ููุญุฉ ุงูุฅุญุตุงุฆูุงุช</Typography>

      <ButtonGroup variant="contained" sx={{ mb: 4 }}>
        <Button
          color={userType === "student" ? "primary" : "inherit"}
          onClick={() => setUserType("student")}
        >
          ๐จโ๐ ุงูุทุงูุจ
        </Button>
        <Button
          color={userType === "instructor" ? "primary" : "inherit"}
          onClick={() => setUserType("instructor")}
        >
          ๐จโ๐ซ ุงููุฏุฑุจ
        </Button>
        <Button
          color={userType === "admin" ? "primary" : "inherit"}
          onClick={() => setUserType("admin")}
        >
          ๐จโ๐ผ ุงููุณุฆูู
        </Button>
      </ButtonGroup>

      <Box>
        {userType === "student" && renderStudentStats()}
        {userType === "instructor" && renderInstructorStats()}
        {userType === "admin" && renderAdminStats()}
      </Box>
    </Box>
  );
};

export default TestNow;
